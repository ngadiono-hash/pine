
//@version=5
//@strategy_alert_message {{strategy.order.alert_message}}
strategy('Squeeze & Hull','SH v7', default_qty_type= strategy.percent_of_equity, default_qty_value= 100, initial_capital= 10000, overlay= true)
GS = "Sell Settings"
GSTr = "Sell Trail Settings"
GB  = "Buy Settings"
GBTr  = "Buy Trail Settings"
GP = "Parameter Settings"
color_up = color.teal
color_dn = color.red
color_nt = color.black
// HELPER FUNCTION
perFunc(_E, _V) => _E * (_V / 100)
atrFunc = ta.atr(14)
pipsFunc(_E) =>
    switch (syminfo.ticker)
        "XAUUSD" => _E * 0.1
        "GBPJPY" => _E * 0.01
        "USDJPY" => _E * 0.01
        "EURUSD" => _E * 0.0001
        "GBPUSD" => _E * 0.0001
// INPUT BUY
EB = input.bool(true,"Enable Buy", group= GB, inline="1")
BLog = input.string("1", "", options= ["1","2","3","4","5"], group= GB, inline= "1")
BSL = input.float(0.6,"SL", group= GB, inline= "2")
BTP = input.float(1.0,"TP", group= GB, inline= "2")
BDIS = input.float(40, "Distance Buy Entry", group= GB, inline= "")
Batr = input.bool(false, "Use ATR", group= GB)
Bhma_for = input.bool(true, "Filter Hull Formation", group= GB, inline= "3")
Bhma_pos = input.bool(false, "Filter Hull Position", group= GB, inline= "3")
// INPUT BUY TRAIL
EBT = input.bool(true,"Trail UpTrend", group= GBTr, inline= "trend")
BTSRC = input.source(hlcc4, "", group= GBTr, inline= "trend")
BTSL = input.float(0.5,"SL", group= GBTr, inline= "trail")
BTTP = input.float(1.0,"TP", group= GBTr, inline= "trail")
BTDIS = input.float(-20,"Distance Trail Entry", group= GBTr)
// INPUT SELL
ES = input.bool(true, "Enable Sell", group= GS, inline= "1")
SLog = input.string("1", "", options= ["1","2","3","4","5"], group= GS, inline= "1")
SSL = input.float(0.7,"SL", group= GS, inline="2")
STP = input.float(1.0,"TP", group= GS, inline="2")
SDIS = input.float(-40, "Distance Sell Entry", group= GS, inline= "")
Satr = input.bool(true, "Use ATR", group= GS)
Shma_for = input.bool(true, "Filter Hull Formation", group= GS, inline= "3")
Shma_pos = input.bool(false, "Filter Hull Position", group= GS, inline= "3")


// INPUT PARAMETER INDICATOR
LF = input.int(3,"Order Lifespan", group= GP, inline= "dist")
LH1 = input.int(60,"Hull Length ", group= GP, inline= "hull")
LH2 = input.int(100," : ", group= GP, inline= "hull")
ttm_len = input.int(16, "TTM Length", group= GP, inline= "bb")
showSqz = input.bool(false, "Show SQZ", group= GP, inline= "show")
showHMA = input.bool(false, "Show HMA", group= GP, inline= "show")

//BOLLINGER BANDS
source = ohlc4
BB_basis = ta.sma(source, ttm_len)
dev = 2.0 * ta.stdev(source, ttm_len)
BB_upper = BB_basis + dev
BB_lower = BB_basis - dev
//KELTNER CHANNELS
KC_basis = ta.sma(source, ttm_len)
devKC = ta.sma(ta.tr, ttm_len)
KC_upper_high = KC_basis + devKC * 1.0
KC_lower_high = KC_basis - devKC * 1.0
KC_upper_mid = KC_basis + devKC * 1.5
KC_lower_mid = KC_basis - devKC * 1.5
KC_upper_low = KC_basis + devKC * 2.0
KC_lower_low = KC_basis - devKC * 2.0
//SQUEEZE CONDITIONS
NoSqz = BB_lower < KC_lower_low or BB_upper > KC_upper_low //NO SQUEEZE: GREEN
LowSqz = BB_lower >= KC_lower_low or BB_upper <= KC_upper_low //LOW COMPRESSION: BLACK
MidSqz = BB_lower >= KC_lower_mid or BB_upper <= KC_upper_mid //MID COMPRESSION: RE_B
HighSqz = BB_lower >= KC_lower_high or BB_upper <= KC_upper_high //HIGH COMPRESSION: ORANGE
//MOMENTUM OSCILLATOR
mom = ta.linreg(source - math.avg(math.avg(ta.highest(high, ttm_len), ta.lowest(low, ttm_len)), ta.sma(source, ttm_len)), ttm_len, 0)
//MOMENTUM HISTOGRAM COLOR
iff_1 = mom > nz(mom[1]) ? color.new(#089981,0) : color.new(#f23645,50)
iff_2 = mom < nz(mom[1]) ? color.new(#f23645,0) : color.new(#089981,50)
mom_color = mom > 0 ? iff_1 : iff_2
//SQUEEZE DOTS COLOR
sq_color = HighSqz ? color.new(color.orange, 0) : MidSqz ? color.new(color.red, 0) : LowSqz ? color.new(color.black, 0) : color.new(color.green, 0)
// HULL CALCULATION
hma1 = ta.hma(source, LH1)
hma2 = ta.hma(source, LH2)
hma1_color = hma1 > hma1[1] ? color_up : color_dn
hma2_color = hma2 > hma2[1] ? color_up : color_dn
// LOGIC CONDITION
bHMA_for = Bhma_for ? hma1 > hma2 : true
sHMA_for = Shma_for ? hma1 < hma2 : true
bHMA_pos = Bhma_pos ? close > (hma2 + hma1) / 2: true
sHMA_pos = Shma_pos ? close < (hma2 + hma1) / 2: true

crossUp = ta.crossover(mom,nz(mom[1]))
crossDn = ta.crossunder(mom,nz(mom[1]))

bTTM = switch BLog
    "1" => crossUp
    "2" => crossUp and mom < 0
    "3" => crossUp and mom > 0
    "4" => ta.crossover(mom,0)
    "5" => mom_color != mom_color[1]
sTTM = switch SLog
    "1" => crossDn
    "2" => crossDn and mom < 0
    "3" => crossDn and mom > 0
    "4" => ta.crossunder(mom,0)
    "5" => mom_color != mom_color[1]



orderUp = strategy.position_size > 0
orderDn = strategy.position_size < 0
noOpenOrder = strategy.position_size == 0
var float orderLine = na
var bool B1_status = false
var bool B2_status = false
var bool S1_status = false
var int B1_index = na
var int B2_index = na
var int S1_index = na
bool B1_sign = false
bool B2_sign = false
bool S1_sign = false
buyConfirmed = EB and bTTM and noOpenOrder and bHMA_pos and bHMA_for
sellConfirmed = ES and sTTM and noOpenOrder and sHMA_pos and sHMA_for

// MAIN FUNCTION
var float[] E_B = array.new_float(3)
var float[] E_S = array.new_float(3)
    
if sellConfirmed
    S1_sign := true
    S1_status := true
    S1_index := bar_index
    entryPoint = close
    array.set(E_S, 0, entryPoint - pipsFunc(SDIS))
    if Satr
        array.set(E_S, 1, array.get(E_S, 0) + (atrFunc * SSL))
        array.set(E_S, 2, array.get(E_S, 0) - (atrFunc * STP))
    else
        array.set(E_S, 1, array.get(E_S, 0) + perFunc(array.get(E_S, 0), SSL))
        array.set(E_S, 2, array.get(E_S, 0) - perFunc(array.get(E_S, 0), STP))
    msg = "Signal Sell \nEntry: " + str.tostring(array.get(E_S,0)) + "\n" + "SL: " + str.tostring(array.get(E_S,1)) + "\n" + "TP: " + str.tostring(array.get(E_S,2))
    alert(msg, alert.freq_once_per_bar)
    if close > array.get(E_S, 0)
        strategy.entry("Sell", strategy.short, stop= array.get(E_S, 0), alert_message= "Sell Stop Filled")
    else
        strategy.entry("Sell", strategy.short, limit= array.get(E_S, 0), alert_message= "Sell Limit Filled")
    orderLine := array.get(E_S,0)

if buyConfirmed
    B1_sign := true
    B1_status := true
    B1_index := bar_index
    entryPoint = close
    array.set(E_B, 0, entryPoint + pipsFunc(BDIS))
    if Batr
        array.set(E_B, 1, array.get(E_B, 0) - (atrFunc * BSL))
        array.set(E_B, 2, array.get(E_B, 0) + (atrFunc * BTP))
    else
        array.set(E_B, 1, array.get(E_B, 0) - perFunc(array.get(E_B, 0), BSL))
        array.set(E_B, 2, array.get(E_B, 0) + perFunc(array.get(E_B, 0), BTP))
    msg = "Signal Buy \nEntry: " + str.tostring(array.get(E_B,0)) + "\n" + "SL: " + str.tostring(array.get(E_B,1)) + "\n" + "TP: " + str.tostring(array.get(E_B,2))
    alert(msg, alert.freq_once_per_bar)
    if close < array.get(E_B, 0)
        strategy.entry("Buy", strategy.long, stop= array.get(E_B, 0), alert_message= "Buy Stop Filled")
    else
        strategy.entry("Buy", strategy.long, limit= array.get(E_B, 0), alert_message= "Buy Limit Filled")
    orderLine := array.get(E_B,0)

if strategy.wintrades > strategy.wintrades[1] and strategy.closedtrades.size(strategy.closedtrades - 1) > 0
    if EBT
        B2_sign := true
        B2_status := true
        B2_index := bar_index
        entryPoint = BTSRC
        array.set(E_B, 0, entryPoint + pipsFunc(BTDIS))
        Batr := false
        if Batr
            array.set(E_B, 1, array.get(E_B, 0) - (atrFunc * BSL))
            array.set(E_B, 2, array.get(E_B, 0) + (atrFunc *BTP))
        else
            array.set(E_B, 1, array.get(E_B, 0) - perFunc(array.get(E_B, 0), BTSL))
            array.set(E_B, 2, array.get(E_B, 0) + perFunc(array.get(E_B, 0), BTTP))
        msg = "Signal Trail Buy \nEntry: " + str.tostring(array.get(E_B,0)) + "\n" + "SL: " + str.tostring(array.get(E_B,1)) + "\n" + "TP: " + str.tostring(array.get(E_B,2))
        alert(msg, alert.freq_once_per_bar)
        if close < array.get(E_B, 0)
            strategy.entry("Buy2", strategy.long, stop=array.get(E_B, 0), alert_message= "Buy Stop Trail Filled")
        else
            strategy.entry("Buy2", strategy.long, limit=array.get(E_B, 0), alert_message= "Buy Limit Trail Filled")
        orderLine := array.get(E_B,0)

if bar_index - S1_index >= LF
    if noOpenOrder and S1_status
        strategy.cancel("Sell")
        alert("Order Sell Expired", alert.freq_once_per_bar)
        S1_status := false
        orderLine := na
        S1_index := na
if bar_index - B1_index >= LF
    if noOpenOrder and B1_status
        strategy.cancel("Buy")
        alert("Order Buy Expired", alert.freq_once_per_bar)
        B1_status := false
        orderLine := na
        B1_index := na
if bar_index - B2_index >= LF
    if noOpenOrder and B2_status
        strategy.cancel("Buy2")
        alert("Order Buy Expired", alert.freq_once_per_bar)
        B2_status := false
        orderLine := na
        B2_index := na
if orderDn
    S1_status := false
    strategy.exit("Sell Exit", from_entry="Sell", stop= array.get(E_S,1), limit= array.get(E_S,2), comment_loss= "SL", comment_profit= "TP", alert_profit= "Sell Profit", alert_loss= "Sell Lose")

if orderUp
    B1_status := false
    B2_status := false
    strategy.exit("Buy Exit", from_entry="Buy", stop= array.get(E_B,1), limit= array.get(E_B,2), comment_loss= "SL", comment_profit= "TP", alert_profit= "Buy Profit", alert_loss= "Buy Lose")
    strategy.exit("Buy Exit", from_entry="Buy2", stop= array.get(E_B,1), limit= array.get(E_B,2), comment_loss= "SL", comment_profit= "TP", alert_profit= "Buy Profit", alert_loss= "Buy Lose")
// debug    
//plotshape(B1_status, "orderPlace", color=color.black, style=shape.circle)
//plotshape(B2_status, "order2Place", color=color.green, style=shape.circle)
plot(showHMA ? hma1 : na,"Hull MA 1", color= color.new(hma1_color,80), linewidth=2)
plot(showHMA ? hma2 : na,"Hull MA 2", color= color.new(hma2_color,80), linewidth=3)
plotshape(showSqz ? true : na, "Squeeze", style= shape.square , location = location.bottom, color=sq_color, size = size.small)
// PLOT ORDER LINE & SHAPE
// SHAPE
plotshape(S1_sign, "Sell Signal", location= location.abovebar, color=color_dn, style=shape.triangledown)
plotshape(B1_sign, "Buy Signal 1", location= location.belowbar, color=color_up, style=shape.triangleup)
plotshape(B2_sign, "Buy Signal 2", location= location.belowbar, color=color.lime, style=shape.triangleup)
// LINE ORDER
plot(S1_status ? orderLine : na, "Order Line Sell", color= color.new(color.fuchsia,0), style= plot.style_steplinebr, linewidth=1)
plot(B1_status ? orderLine : na, "Order Line Buy 1", color= color.new(color.fuchsia,0), style= plot.style_steplinebr, linewidth=1)
plot(B2_status ? orderLine : na, "Order Line Buy 2", color= color.new(color.fuchsia,0), style= plot.style_steplinebr, linewidth=1)

// TP SL PENDING ORDER
plot(S1_sign ? array.get(E_S,1) : na, "Sell Signal SL", color= color.orange, style= plot.style_steplinebr, linewidth= 1)
plot(S1_sign ? array.get(E_S,2) : na, "Sell Signal TP", color= color.blue, style= plot.style_steplinebr, linewidth= 1)
plot(B1_sign or B2_sign ? array.get(E_B,1) : na, "Buy 1 Signal SL", color= color.orange, style= plot.style_steplinebr, linewidth= 1)
plot(B1_sign or B2_sign ? array.get(E_B,2) : na, "Buy 1 Signal TP", color= color.blue, style= plot.style_steplinebr, linewidth= 1)

// PLOT BUY ACTIVE
pb1 = plot(orderUp ? array.get(E_B,0) : na, "Buy Entry Active", color= color_nt, style= plot.style_steplinebr)
pb2 = plot(orderUp ? array.get(E_B,1) : na, "Buy SL Active", color= color_dn, style= plot.style_steplinebr)
pb3 = plot(orderUp ? array.get(E_B,2) : na, "Buy TP Active", color= color_up, style= plot.style_steplinebr)
// PLOT SELL ACTIVE
ps1 = plot(orderDn ? array.get(E_S,0) : na, "Sell Entry Active", color= color_nt, style= plot.style_steplinebr)
ps2 = plot(orderDn ? array.get(E_S,1) : na, "Sell SL Active", color=color_dn, style=plot.style_steplinebr)
ps3 = plot(orderDn ? array.get(E_S,2) : na, "Sell TP Active", color=color_up, style=plot.style_steplinebr)

bgcolor(strategy.losstrades > strategy.losstrades[1] ? 
	 color.new(color.red, 80) : na, title= "BG Loss")
bgcolor(strategy.wintrades > strategy.wintrades[1] ? color.new(color.green,80) : na, title= "BG Win")
barcolor(mom_color, title= "Candle Color")
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var string GPT = "Monthly Performance Table"
bool mptable_on                 = input.bool(title="Table", defval=true, display=display.none, group=GPT, inline="MPT_Toggles")
bool mptable_debug              = input.bool(title="Debug", defval=false, display=display.none, group=GPT, inline="MPT_Toggles")
fillColor = input.bool(false, "Fill Transaction", group= GPT, inline= "MPT_Toggles")

fill(pb1,pb2, color= fillColor ? color.new(color_dn,80) : na)
fill(pb1,pb3, color= fillColor ? color.new(color_up,80) : na)
fill(ps1,ps2, color= fillColor ? color.new(color_dn,80) : na)
fill(ps1,ps3, color= fillColor ? color.new(color_up,80) : na)

int mptable_precision           = 2
color mptable_titleColor        = color.new(#cccccc,0)
color mptable_titleTextColor    = color.new(#363a45,0)
color mptable_textColor         = color.black
color mptable_ProfitColor       = color.new(color.green, 50)
color mptable_LossColor         = color.new(color.red, 50)
color mptable_BreakEvenColor    = color.new(color.blue, 50)
int mptable_pageNumber          = 1
int mptable_pageSize            = 20
string mptable_tableTextSize    = "Normal"

// Custom function for getting table text sized based on user input
table_text_size(_size) =>
    switch _size
        "Auto"   => size.auto   
        "Huge"   => size.huge   
        "Large"  => size.large  
        "Normal" => size.normal 
        "Small"  => size.small
        => size.tiny
tableTextSize = table_text_size(mptable_tableTextSize)

// Custom function for getting decimal precision based on given number 
// (eg. if number is > 0 but < 0.05 or < 0 and > -0.05, set precision to 3 to avoid rounding to 0 which is misleading)
getRoundingPrecision(float num) =>
    if (num > 0 and num < 0.05) or (num < 0 and num > -0.05)
        3
    else
        mptable_precision

// Define an open trade's cost (used to calculate commission cost)
type TradeCost
    int entryTime
    float entryPrice
    float cost

// Define a monthly/yearly return type
type StrategyReturn
    float profit
    float drawdown
    float peak
    int timestamp

// Store accumulated P&L values
var float accumulatedMonthlyPL = 0
var float accumulatedYearlyPL = 0
var float bestAccumulatedMonthlyPL = 0
var float bestAccumulatedYearlyPL = 0

// Store drawdown values
var float equityPeak = strategy.initial_capital
var float yearlyEquityHigh = 0
var float currentYearlyDrawdown = 0
var float yearlyMaxDrawdown = 0
var float worstDrawdown = 0
var float monthlyEquityHigh = 0
var float currentMonthlyDrawdown = 0
var float monthlyMaxDrawdown = 0
var int currentDrawdownBars = 0
var int maxDrawdownBars = 0

// Store stat arrays
var array<int>      totalDrawdownBars   = array.new<int>(0)
var array<float>    totalDrawdowns      = array.new<float>(0)

// Store long & short trade count
var int totalBreakEvenTrades = 0
var int totalLongTrades = 0
var int totalLongTradeWins = 0
var int totalShortTrades = 0
var int totalShortTradeWins = 0

// Store open trade commission costs in array
var costOfOpenTrades = array.new<TradeCost>(0)

// Detect opened trade and save cost of trade (I tried many methods to get my numbers to match the Cumulative Profit list in the Strategy Tester, no idea why, but none of them worked without doing this)
if strategy.opentrades != strategy.opentrades[1] and strategy.closedtrades == strategy.closedtrades[1]
    costOfTrade = strategy.grossloss - strategy.grossloss[1]
    costOfOpenTrades.push(TradeCost.new(strategy.opentrades.entry_time(strategy.opentrades - 1), strategy.opentrades.entry_price(strategy.opentrades - 1), costOfTrade))

// Detect a closed trade
// TV Documentation: Trade List's Cumulative Profit % Formula = TradeProfit / (InitialCapital + Cumulative Profit of the previous trades) * 100%
if strategy.closedtrades != strategy.closedtrades[1]
    
    // Retrieve trade cost for the closed trade
    float tradeCost = 0
    int removeIdx = -1
    if costOfOpenTrades.size() > 0
        for i = 0 to costOfOpenTrades.size() - 1
            TradeCost tc = costOfOpenTrades.get(i)
            if tc.entryTime == strategy.closedtrades.entry_time(strategy.closedtrades - 1) and tc.entryPrice == strategy.closedtrades.entry_price(strategy.closedtrades - 1)
                tradeCost := tc.cost
                removeIdx := i 
                break
    
    // Remove cost
    if removeIdx != -1
        costOfOpenTrades.remove(removeIdx)

    // Calculate equity before trade closed (strategy.equity will not do, because it changes bar-by-bar based on open P&L not realized P&L)
    float preEquity = strategy.initial_capital + strategy.netprofit[1]

    // Calculate P&L + cost of this trade
    float profitLoss = 0 
    if strategy.losstrades > strategy.losstrades[1]
        profitLoss := (strategy.grossloss - (strategy.grossloss[1] - tradeCost)) * -1
    else
        profitLoss := strategy.grossprofit - strategy.grossprofit[1]
    
    // Check if this was a long or short trade and if it won or lost
    if strategy.position_size[1] > 0
        totalLongTrades := totalLongTrades + 1
        if profitLoss > 0
            totalLongTradeWins := totalLongTradeWins + 1
    else if strategy.position_size[1] < 0
        totalShortTrades := totalShortTrades + 1
        if profitLoss > 0
            totalShortTradeWins := totalShortTradeWins + 1
        
    // Check if the trade broke even
    if profitLoss == 0
        totalBreakEvenTrades := totalBreakEvenTrades + 1

    // Calculate cumulative profit % for this trade 
    float cumulativeProfitPercent = (profitLoss / preEquity) * 100

    // Store highest peak value of equity (we can now use strategy.equity since equity has updated to realized P&L on this bar)
    if strategy.equity > equityPeak
        equityPeak := strategy.equity

    // Calculate total system drawdown %
    float equityDD = ((strategy.equity - equityPeak) / equityPeak) * 100
    if equityDD < worstDrawdown
        worstDrawdown := equityDD

    // Store accumulated monthly + yearly P&L
    accumulatedMonthlyPL := cumulativeProfitPercent + accumulatedMonthlyPL[1]
    accumulatedYearlyPL := accumulatedYearlyPL + cumulativeProfitPercent

    // Save max favourable excursion for this month (ie. peak return as %)
    if accumulatedMonthlyPL > bestAccumulatedMonthlyPL
        bestAccumulatedMonthlyPL := accumulatedMonthlyPL

    // Save max favourable excursion for this year (ie. peak return as %)
    if accumulatedYearlyPL > bestAccumulatedYearlyPL
        bestAccumulatedYearlyPL := accumulatedYearlyPL

    // Track max equity high over current year for max yearly drawdown calculation
    if accumulatedYearlyPL > yearlyEquityHigh
        yearlyEquityHigh := accumulatedYearlyPL
    
    // Check if our yearly realized equity high minus current realized equity exceeds our stored max drawdown for the year, update if necessary, and save worst drawdown
    if accumulatedYearlyPL - yearlyEquityHigh < 0
        currentYearlyDrawdown := accumulatedYearlyPL - yearlyEquityHigh
        if currentYearlyDrawdown < yearlyMaxDrawdown
            yearlyMaxDrawdown := currentYearlyDrawdown
        currentDrawdownBars := currentDrawdownBars + 1
    
    // Track max equity high over current month for max monthly drawdown calculation
    if accumulatedMonthlyPL > monthlyEquityHigh
        monthlyEquityHigh := accumulatedMonthlyPL
    
    // Check if our monthly realized equity high minus current realized equity exceeds our stored max drawdown for the month, update if necessary, and save worst drawdown
    if accumulatedMonthlyPL - monthlyEquityHigh < 0
        currentMonthlyDrawdown := accumulatedMonthlyPL - monthlyEquityHigh
        if currentMonthlyDrawdown < monthlyMaxDrawdown
            monthlyMaxDrawdown := currentMonthlyDrawdown
    
    // Debug label
    if mptable_debug
        string debugTip = "Equity = $" + str.tostring(strategy.equity, "#.##") + 
         "\nP&L=" + str.tostring(cumulativeProfitPercent) + "%" +
         "\nAccumMonthlyP&L=" + str.tostring(math.round(accumulatedMonthlyPL, getRoundingPrecision(accumulatedMonthlyPL))) + "%" +
         "\nAccumYearlyP&L=" + str.tostring(math.round(accumulatedYearlyPL, getRoundingPrecision(accumulatedYearlyPL))) + "%" +
         "\nMonthlyMaxDD=" + str.tostring(math.round(monthlyMaxDrawdown, getRoundingPrecision(monthlyMaxDrawdown))) + "%" +
         "\nYearlyMaxDD=" + str.tostring(math.round(yearlyMaxDrawdown, getRoundingPrecision(yearlyMaxDrawdown))) + "%" +
         "\nTotalMaxDD=" + str.tostring(math.round(worstDrawdown, getRoundingPrecision(worstDrawdown))) + "%" +
         "\nCurrentDDBars=" + str.tostring(currentDrawdownBars) +
         "\nMaxDDBars=" + str.tostring(maxDrawdownBars) +
         "\nTotalBreakEven=" + str.tostring(totalBreakEvenTrades) +
         "\nTotalLongs=" + str.tostring(totalLongTrades) +
         "\nTotalLongWins=" + str.tostring(totalLongTradeWins) +
         "\nTotalShorts=" + str.tostring(totalShortTrades) +
         "\nTotalShortWins=" + str.tostring(totalShortTradeWins)
        label.new(bar_index, high + (high * 0.01), "P&L " + str.tostring(math.round(cumulativeProfitPercent, getRoundingPrecision(cumulativeProfitPercent))) + "%", tooltip=debugTip, textcolor=color.white)

// Calculate drawdown since last equity high (NOT max drawdown, just the current max DD since we were out of DD)
float t_equityDD = ((strategy.equity - equityPeak) / equityPeak) * 100
var float currentMaxDrawdownSinceLast = 0

// Update Max Drawdown bar count and current DD if equity is under water, check isconfirmed to prevent double-counting bars with recalc_on_order_fills on
if strategy.equity < equityPeak and barstate.isconfirmed
    currentDrawdownBars := currentDrawdownBars + 1
    if currentDrawdownBars > maxDrawdownBars
        maxDrawdownBars := currentDrawdownBars
    if t_equityDD < currentMaxDrawdownSinceLast
        currentMaxDrawdownSinceLast := t_equityDD
else
    if currentDrawdownBars > 0
        totalDrawdownBars.push(currentDrawdownBars)
        totalDrawdowns.push(currentMaxDrawdownSinceLast)
    currentDrawdownBars := 0
    currentMaxDrawdownSinceLast := 0

// Prepare arrays to store Yearly and Monthly P&Ls
var array<StrategyReturn> monthlyReturns = array.new<StrategyReturn>(0)
var array<StrategyReturn> yearlyReturns = array.new<StrategyReturn>(0)

var bool firstEntryTime = false
// Retrieve entry time of initial entry in open position
if not firstEntryTime and not na(strategy.opentrades.entry_time(0))
    firstEntryTime := true

// Detect new month and year
bool new_month = month(time) != month(time[1])
bool new_year = year(time) != year(time[1])

// Detect a new month and store its return profile
if not barstate.isfirst and new_month and firstEntryTime or barstate.islastconfirmedhistory
    StrategyReturn mr = StrategyReturn.new(accumulatedMonthlyPL, monthlyMaxDrawdown, bestAccumulatedMonthlyPL, time[1]) // time)
    monthlyReturns.push(mr)
    accumulatedMonthlyPL := 0
    monthlyMaxDrawdown := 0
    monthlyEquityHigh := 0
    currentMonthlyDrawdown := 0
    bestAccumulatedMonthlyPL := 0

    // Detect a new year and reset tracking variables
if not barstate.isfirst and new_year and firstEntryTime or barstate.islastconfirmedhistory
    StrategyReturn yr = StrategyReturn.new(accumulatedYearlyPL, yearlyMaxDrawdown, bestAccumulatedYearlyPL, time[1])
    yearlyReturns.push(yr)
    accumulatedYearlyPL := 0
    yearlyMaxDrawdown := 0
    yearlyEquityHigh := 0
    currentYearlyDrawdown := 0
    bestAccumulatedYearlyPL := 0

// DEBUG code
bgcolor(mptable_debug and new_month ? color.lime : na, title="New Month")
bgcolor(mptable_debug and new_year ? color.red : na, title="New Year")
// END DEBUG CODE

// Define Monthly P&L Table    
var table performance_table = table(na)

//Adjust mptable_pageSize if the years are less than the mptable_pageSize
if yearlyReturns.size() < mptable_pageSize
    mptable_pageSize := yearlyReturns.size()

// Caluclate the start and end of page to display
int startIndex = math.max(math.min(yearlyReturns.size() - 1, yearlyReturns.size() - 1 - (mptable_pageSize + 1) * mptable_pageNumber), mptable_pageSize - 1)
int endIndex = math.max(startIndex - mptable_pageSize, 0)
mptable_pageSize := endIndex <= mptable_pageSize ? endIndex : mptable_pageSize

// If this is the last bar on our chart, display the performance table
var int EXTRA_STAT_ROWS = 5 // This ensures table includes enough rows for CAGR etc
if mptable_on and monthlyReturns.size() > 0 and barstate.islastconfirmedhistory

    // Create table (100 rows = 100 years of data, should be plenty for all markets!)
    performance_table := table.new(position.bottom_right, columns=17, rows=yearlyReturns.size() + EXTRA_STAT_ROWS, border_width=1)

    // Set column headers
    performance_table.cell(0, 0, "Year", bgcolor=mptable_titleColor, text_color=mptable_titleTextColor, text_size=tableTextSize)
    performance_table.cell(1, 0, "Jan", bgcolor=mptable_titleColor, text_color=mptable_titleTextColor, text_size=tableTextSize)
    performance_table.cell(2, 0, "Feb", bgcolor=mptable_titleColor, text_color=mptable_titleTextColor, text_size=tableTextSize)
    performance_table.cell(3, 0, "Mar", bgcolor=mptable_titleColor, text_color=mptable_titleTextColor, text_size=tableTextSize)
    performance_table.cell(4, 0, "Apr", bgcolor=mptable_titleColor, text_color=mptable_titleTextColor, text_size=tableTextSize)
    performance_table.cell(5, 0, "May", bgcolor=mptable_titleColor, text_color=mptable_titleTextColor, text_size=tableTextSize)
    performance_table.cell(6, 0, "Jun", bgcolor=mptable_titleColor, text_color=mptable_titleTextColor, text_size=tableTextSize)
    performance_table.cell(7, 0, "Jul", bgcolor=mptable_titleColor, text_color=mptable_titleTextColor, text_size=tableTextSize)
    performance_table.cell(8, 0, "Aug", bgcolor=mptable_titleColor, text_color=mptable_titleTextColor, text_size=tableTextSize)
    performance_table.cell(9, 0, "Sep", bgcolor=mptable_titleColor, text_color=mptable_titleTextColor, text_size=tableTextSize)
    performance_table.cell(10, 0, "Oct", bgcolor=mptable_titleColor, text_color=mptable_titleTextColor, text_size=tableTextSize)
    performance_table.cell(11, 0, "Nov", bgcolor=mptable_titleColor, text_color=mptable_titleTextColor, text_size=tableTextSize)
    performance_table.cell(12, 0, "Dec", bgcolor=mptable_titleColor, text_color=mptable_titleTextColor, text_size=tableTextSize)
    performance_table.cell(13, 0, "TOTAL", bgcolor=mptable_titleColor, text_color=mptable_titleTextColor, text_size=tableTextSize)
    performance_table.cell(14, 0, "MaxDD", bgcolor=mptable_titleColor, text_color=mptable_titleTextColor, text_size=tableTextSize)

    // Set yearly values
    for year_index = startIndex to yearlyReturns.size() == 0 ? na : endIndex
        
        // Get yearly return for this loop, set year number in first column, determine color of cell
        StrategyReturn yearlyReturn = yearlyReturns.get(year_index)

        // Set year title and determine color
        performance_table.cell(0, year_index + 1, str.tostring(year(yearlyReturn.timestamp)), bgcolor=mptable_titleColor, text_color=mptable_titleTextColor, text_size=tableTextSize)
        color y_color = yearlyReturn.profit > 0 ? mptable_ProfitColor : yearlyReturn.profit == 0 ? mptable_BreakEvenColor : mptable_LossColor

        // Populate yearly cell values
        string yearlyTip = "MaxDD: " + str.tostring(math.round(yearlyReturn.drawdown, getRoundingPrecision(yearlyReturn.drawdown))) + "%" +
             "\nMFE: " + str.tostring(math.round(yearlyReturn.peak, getRoundingPrecision(yearlyReturn.peak))) + "%"
        performance_table.cell(13, year_index + 1, (yearlyReturn.profit > 0 ? "+" : "") + str.tostring(math.round(yearlyReturn.profit, getRoundingPrecision(yearlyReturn.profit))) + "%", bgcolor=y_color, text_color=color.white, text_size=tableTextSize, tooltip=yearlyTip)
        performance_table.cell(14, year_index + 1, str.tostring(math.round(yearlyReturn.drawdown, getRoundingPrecision(yearlyReturn.drawdown))) + "%", bgcolor=mptable_BreakEvenColor, text_color=color.white, text_size=tableTextSize)

        // Set monthly values
        for month_index = 0 to monthlyReturns.size() - 1

            // Get monthly return for this loop, get current year for this loop, then calculate the corresponding table column and row
            StrategyReturn monthlyReturn = monthlyReturns.get(month_index)
            int yearOfMonth = year(monthlyReturn.timestamp)
            int monthCol = month(monthlyReturn.timestamp)
            
            // populate monthly profit only if the years of the yearly return match with the monthly return. 
            if yearOfMonth == year(yearlyReturn.timestamp)
                 // Determine color for monthly P&L
                color m_color = monthlyReturn.profit > 0 ? color.new(mptable_ProfitColor, color.t(mptable_ProfitColor) + 20) : monthlyReturn.profit == 0 ? color.new(mptable_BreakEvenColor, color.t(mptable_BreakEvenColor) + 20) : color.new(mptable_LossColor, color.t(mptable_LossColor) + 20)
                
                // Set monthly P&L cell
                string monthlyTip = "MaxDD: " + str.tostring(math.round(monthlyReturn.drawdown, getRoundingPrecision(monthlyReturn.drawdown))) + "%" +
                     "\nMFE: " + str.tostring(math.round(monthlyReturn.peak, getRoundingPrecision(monthlyReturn.peak))) + "%"
                performance_table.cell(monthCol, year_index + 1, str.tostring(math.round(monthlyReturn.profit, getRoundingPrecision(monthlyReturn.profit))), bgcolor=m_color, text_color=color.white, text_size=tableTextSize, tooltip=monthlyTip)

    // Calculate the time difference in milliseconds
    float start_time = strategy.closedtrades.entry_time(0)
    float end_time = strategy.closedtrades.exit_time(strategy.closedtrades - 1)
    float time_diff = end_time - start_time

    // Convert time difference from milliseconds to years
    float time_diff_years = time_diff / 31536000000.0

    // Calculate CAGR
    float final_value = strategy.netprofit + strategy.initial_capital
    float cagr = (math.pow(final_value / strategy.initial_capital, 1 / time_diff_years) - 1) * 100

    float percentReturn = (strategy.netprofit / strategy.initial_capital) * 100
    float mar = cagr / math.abs(worstDrawdown)
    lastMonthRowIndex = startIndex < 5 ? 5 : startIndex

    // Populate table data
    float totalWinRate = (strategy.wintrades / strategy.closedtrades) * 100
    float longWinRate = nz((totalLongTradeWins / totalLongTrades) * 100)
    float shortWinRate = nz((totalShortTradeWins / totalShortTrades) * 100)
    string returnTip = "Based on a total of " + str.tostring(strategy.closedtrades) + " trades" +
         "\nWin Rate = " + str.tostring(math.round(totalWinRate, getRoundingPrecision(totalWinRate))) + "%" +
         "\nLong Trades = " + str.tostring(totalLongTrades) + " (Win " + str.tostring(math.round(longWinRate, getRoundingPrecision(longWinRate))) + "%)" +
         "\nShort Trades = " + str.tostring(totalShortTrades) + " (Win " + str.tostring(math.round(shortWinRate, getRoundingPrecision(shortWinRate))) + "%)"
    performance_table.cell(15, lastMonthRowIndex, "Return: " + (percentReturn > 0 ? "+" : "") + str.tostring(math.round(percentReturn, getRoundingPrecision(percentReturn))) + "%", bgcolor=mptable_titleColor, text_color=mptable_titleTextColor, text_font_family=font.family_monospace, text_size=tableTextSize, tooltip=returnTip)
    performance_table.cell(15, lastMonthRowIndex - 1, "MAR: " + str.tostring(mar, "#.##"), bgcolor=mptable_titleColor, text_color=mptable_titleTextColor, text_font_family=font.family_monospace, text_size=tableTextSize, tooltip="Measure of return adjusted for risk: CAGR divided by Max Drawdown. Indicates how comfortable the system might be to trade. Higher than 0.5 is ideal, 1.0 and above is very good, and anything 3.0 or above should be considered suspicious.")
    performance_table.cell(15, lastMonthRowIndex - 2, "DD Bars: " + str.tostring(maxDrawdownBars), bgcolor=mptable_titleColor, text_color=mptable_titleTextColor, text_font_family=font.family_monospace, text_size=tableTextSize, tooltip="Average Drawdown Bars: " + str.tostring(totalDrawdownBars.avg(), "#.#") + "\n\nThis is how many bars it took to recover the longest drawdown (note: this is different to the MAX drawdown, and represents time drawdown)")
    performance_table.cell(15, lastMonthRowIndex - 3, "MaxDD: " + str.tostring(math.round(worstDrawdown, getRoundingPrecision(worstDrawdown))) + "%", bgcolor=mptable_titleColor, text_color=mptable_titleTextColor, text_font_family=font.family_monospace, text_size=tableTextSize, tooltip="Average Drawdown: " + str.tostring(totalDrawdowns.avg(), "#.##") + "%\n\nThis number is different to the Strategy Tester because this number is based on closed trade equity while the Tester's MaxDD is based on open equity.")
    performance_table.cell(15, lastMonthRowIndex - 4, "CAGR: " + (cagr > 0 ? "+" : "") + str.tostring(math.round(cagr, getRoundingPrecision(cagr))) + "%", bgcolor=mptable_titleColor, text_color=mptable_titleTextColor, text_font_family=font.family_monospace, text_size=tableTextSize, tooltip="Compounded annual growth rate")
    performance_table.cell(15, lastMonthRowIndex - 5, "REALIZE_B P&L", bgcolor=mptable_titleColor, text_color=mptable_titleTextColor, text_font_family=font.family_monospace, text_size=tableTextSize, tooltip="These numbers are based on Realized equity (closed trades)")

// END
